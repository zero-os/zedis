/*
 * Copyright (C) 2017-2018 GIG Technology NV and Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Use `go generate ./server/api/grpc`
// to generate the corresponding `.pb.go` file.
syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.compare_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Zero-Stor Data Types

enum ObjectStatus {
    missing = 0 [(gogoproto.enumvalue_customname) = "ObjectStatusMissing"];
    ok = 1 [(gogoproto.enumvalue_customname) = "ObjectStatusOK"];
    corrupted = 2 [(gogoproto.enumvalue_customname) = "ObjectStatusCorrupted"];
}

// NamespaceManager allows you to retrieve information about a namespace.
//
// Metadata required (by the server)
// for all methods of the ObjectManager:
//
//     "authentication"
//     JWT token to proof you have sufficient permissions
//     to execute the given action within the given namespace.
//
//     "label"
//     Identifier of the namespace,
//     where the manage will be stored at,
//     or the existing object already lives at.
//
// This metadata cannot be enforced by this protobuf schema.
// However, not defining any of this metadata for any given method,
// will result in a GRPC error.
service NamespaceManager {
    // GetNamespace gets all available information about
    // a requested namespace. Most of the information returned,
    // is not stored in persistent memory,
    // and instead computed on the fly or available
    // from the in-memory cache.
    rpc GetNamespace (GetNamespaceRequest) returns (GetNamespaceResponse) {}
}

message GetNamespaceRequest {}
message GetNamespaceResponse {
    string label = 1;
    int64 readRequestPerHour = 2;
    int64 writeRequestPerHour = 3;
    int64 nrObjects = 4;
}

// ObjectManager allows you to Manage objects and get info about them.
//
// Metadata required (by the server)
// for all methods of the ObjectManager:
//
//     "authentication"
//     JWT token to proof you have sufficient permissions
//     to execute the given action within the given namespace.
//
//     "label"
//     Identifier of the namespace,
//     where the manage will be stored at,
//     or the existing object already lives at.
//
// This metadata cannot be enforced by this protobuf schema.
// However, not defining any of this metadata for any given method,
// will result in a GRPC error.
//
// All methods operate within a given namespace,
// identified by the label given as metadata.
// Meaning that for example the ExistObject might
// return false because that key doesn't exist within
// the specified namespace, even though it might exists
// within an other namespace.
service ObjectManager {
    // Creates an object, using the given data.
    // The key of the object is generated by the server,
    // and will be returned as part of a successfull response.
    // This key can than be used to manage the object from there on.
    rpc CreateObject (CreateObjectRequest) returns (CreateObjectResponse) {}

    // Get an existing object, linked to a given key.
    rpc GetObject (GetObjectRequest) returns (GetObjectResponse) {}

    // DeleteObject deletes an object.
    // Deleting an non-existing object is considered valid.
    rpc DeleteObject (DeleteObjectRequest) returns (DeleteObjectResponse) {}

    // GetObjectStatus returns the status of an object,
    // indicating whether it's OK, missing or corrupt.
    rpc GetObjectStatus (GetObjectStatusRequest) returns (GetObjectStatusResponse) {}

    // ListObjectKeys lists the keys of
    // all stored objects within the namespace (identified by the given label).
    rpc ListObjectKeys (ListObjectKeysRequest) returns (stream ListObjectKeysResponse) {}
}

message CreateObjectRequest {
    bytes data = 1;
}
message CreateObjectResponse {
    bytes key = 1;
}

message GetObjectRequest {
    bytes key = 1;
}
message GetObjectResponse {
    bytes data = 1;
}

message DeleteObjectRequest {
    bytes key = 1;
}
message DeleteObjectResponse {
}

message GetObjectStatusRequest {
    bytes key = 1;
}
message GetObjectStatusResponse {
    ObjectStatus status = 1;
}

message ListObjectKeysRequest {}
message ListObjectKeysResponse {
    bytes key = 1;
}
